input createHadithbookInput {
  data: HadithbookInput
}

type createHadithbookPayload {
  hadithbook: Hadithbook
}

input createHadithInput {
  data: HadithInput
}

type createHadithPayload {
  hadith: Hadith
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteHadithbookInput {
  where: InputID
}

type deleteHadithbookPayload {
  hadithbook: Hadithbook
}

input deleteHadithInput {
  where: InputID
}

type deleteHadithPayload {
  hadith: Hadith
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editHadithbookInput {
  bookname: String
  hadiths: [ID]
}

input editHadithInput {
  hadith_en: String
  hadithbooks: [ID]
  hadith_bn: String
  hadith_ar: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

"""Hadith Collection"""
type Hadith {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  hadith_en: String
  hadith_bn: String
  hadith_ar: String
  hadithbooks(sort: String, limit: Int, start: Int, where: JSON): [Hadithbook]
}

"""Hadith Books"""
type Hadithbook {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  bookname: String
  hadiths(sort: String, limit: Int, start: Int, where: JSON): [Hadith]
}

input HadithbookInput {
  bookname: String
  hadiths: [ID]
}

input HadithInput {
  hadith_en: String
  hadithbooks: [ID]
  hadith_bn: String
  hadith_ar: String
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Hadith | createHadithPayload | updateHadithPayload | deleteHadithPayload | Hadithbook | createHadithbookPayload | updateHadithbookPayload | deleteHadithbookPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createHadith(input: createHadithInput): createHadithPayload
  updateHadith(input: updateHadithInput): updateHadithPayload
  deleteHadith(input: deleteHadithInput): deleteHadithPayload
  createHadithbook(input: createHadithbookInput): createHadithbookPayload
  updateHadithbook(input: updateHadithbookInput): updateHadithbookPayload
  deleteHadithbook(input: deleteHadithbookInput): deleteHadithbookPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  hadith(id: ID!): Hadith
  hadiths(sort: String, limit: Int, start: Int, where: JSON): [Hadith]
  hadithbook(id: ID!): Hadithbook
  hadithbooks(sort: String, limit: Int, start: Int, where: JSON): [Hadithbook]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateHadithbookInput {
  where: InputID
  data: editHadithbookInput
}

type updateHadithbookPayload {
  hadithbook: Hadithbook
}

input updateHadithInput {
  where: InputID
  data: editHadithInput
}

type updateHadithPayload {
  hadith: Hadith
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
